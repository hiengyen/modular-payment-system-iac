
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # module.ai_ml.aws_iam_role.sagemaker[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "sagemaker" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "sagemaker.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "modular-payment-system-sagemaker-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.ai_ml.aws_iam_role_policy.sagemaker_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "sagemaker_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "modular-payment-system-sagemaker-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:ListBucket",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::*-data-bucket",
                          [32m+[0m[0m "arn:aws:s3:::*-data-bucket/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecr:GetAuthorizationToken",
                          [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
                          [32m+[0m[0m "ecr:GetDownloadUrlForLayer",
                          [32m+[0m[0m "ecr:BatchGetImage",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sns:Publish",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:sns:*:*:*-topic"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.ai_ml.aws_sagemaker_endpoint.main[0m will be created
[0m  [32m+[0m[0m resource "aws_sagemaker_endpoint" "main" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m endpoint_config_name = "modular-payment-system-sagemaker-endpoint-config"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m name                 = "modular-payment-system-sagemaker-endpoint"
      [32m+[0m[0m region               = "ap-southeast-1"
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1m  # module.ai_ml.aws_sagemaker_endpoint_configuration.main[0m will be created
[0m  [32m+[0m[0m resource "aws_sagemaker_endpoint_configuration" "main" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "modular-payment-system-sagemaker-endpoint-config"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m region      = "ap-southeast-1"
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }

      [32m+[0m[0m production_variants {
          [32m+[0m[0m initial_instance_count = 1
          [32m+[0m[0m initial_variant_weight = 1
          [32m+[0m[0m instance_type          = "ml.t2.medium"
          [32m+[0m[0m model_name             = "modular-payment-system-sagemaker-model"
          [32m+[0m[0m variant_name           = "main"
          [32m+[0m[0m volume_size_in_gb      = (known after apply)
        }
    }

[1m  # module.ai_ml.aws_sagemaker_model.main[0m will be created
[0m  [32m+[0m[0m resource "aws_sagemaker_model" "main" {
      [32m+[0m[0m arn                = (known after apply)
      [32m+[0m[0m execution_role_arn = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "modular-payment-system-sagemaker-model"
      [32m+[0m[0m region             = "ap-southeast-1"
      [32m+[0m[0m tags               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }

      [32m+[0m[0m inference_execution_config (known after apply)

      [32m+[0m[0m primary_container {
          [32m+[0m[0m image = (known after apply)
          [32m+[0m[0m mode  = "SingleModel"

          [32m+[0m[0m model_data_source (known after apply)
        }
    }

[1m  # module.analytics.aws_iam_role.firehose[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "firehose" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "firehose.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "modular-payment-system-firehose-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.analytics.aws_iam_role_policy.firehose_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "firehose_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "modular-payment-system-firehose-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:PutObjectAcl",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::*-data-bucket",
                          [32m+[0m[0m "arn:aws:s3:::*-data-bucket/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.analytics.aws_kinesis_firehose_delivery_stream.main[0m will be created
[0m  [32m+[0m[0m resource "aws_kinesis_firehose_delivery_stream" "main" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m destination    = "extended_s3"
      [32m+[0m[0m destination_id = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "modular-payment-system-firehose"
      [32m+[0m[0m region         = "ap-southeast-1"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m version_id     = (known after apply)

      [32m+[0m[0m extended_s3_configuration {
          [32m+[0m[0m bucket_arn         = (known after apply)
          [32m+[0m[0m buffering_interval = 300
          [32m+[0m[0m buffering_size     = 5
          [32m+[0m[0m compression_format = "UNCOMPRESSED"
          [32m+[0m[0m custom_time_zone   = "UTC"
          [32m+[0m[0m role_arn           = (known after apply)
          [32m+[0m[0m s3_backup_mode     = "Disabled"

          [32m+[0m[0m cloudwatch_logging_options (known after apply)
        }
    }

[1m  # module.analytics.aws_quicksight_data_source.main[0m will be created
[0m  [32m+[0m[0m resource "aws_quicksight_data_source" "main" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m aws_account_id = (known after apply)
      [32m+[0m[0m data_source_id = "modular-payment-system-quicksight-datasource"
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "modular-payment-system-quicksight-datasource"
      [32m+[0m[0m region         = "ap-southeast-1"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m type           = "AURORA_POSTGRESQL"

      [32m+[0m[0m parameters {
          [32m+[0m[0m aurora_postgresql {
              [32m+[0m[0m database = "modular-payment-systemdb"
              [32m+[0m[0m host     = (known after apply)
              [32m+[0m[0m port     = 5432
            }
        }

      [32m+[0m[0m ssl_properties (known after apply)
    }

[1m  # module.api_gateway.data.aws_cognito_user_pool.main[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_cognito_user_pool" "main" {
      [32m+[0m[0m account_recovery_setting   = (known after apply)
      [32m+[0m[0m admin_create_user_config   = (known after apply)
      [32m+[0m[0m arn                        = (known after apply)
      [32m+[0m[0m auto_verified_attributes   = (known after apply)
      [32m+[0m[0m creation_date              = (known after apply)
      [32m+[0m[0m custom_domain              = (known after apply)
      [32m+[0m[0m deletion_protection        = (known after apply)
      [32m+[0m[0m device_configuration       = (known after apply)
      [32m+[0m[0m domain                     = (known after apply)
      [32m+[0m[0m email_configuration        = (known after apply)
      [32m+[0m[0m estimated_number_of_users  = (known after apply)
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lambda_config              = (known after apply)
      [32m+[0m[0m last_modified_date         = (known after apply)
      [32m+[0m[0m mfa_configuration          = (known after apply)
      [32m+[0m[0m name                       = (known after apply)
      [32m+[0m[0m region                     = (known after apply)
      [32m+[0m[0m schema_attributes          = (known after apply)
      [32m+[0m[0m sms_authentication_message = (known after apply)
      [32m+[0m[0m sms_configuration_failure  = (known after apply)
      [32m+[0m[0m sms_verification_message   = (known after apply)
      [32m+[0m[0m tags                       = (known after apply)
      [32m+[0m[0m user_pool_add_ons          = (known after apply)
      [32m+[0m[0m user_pool_id               = (known after apply)
      [32m+[0m[0m user_pool_tags             = (known after apply)
      [32m+[0m[0m username_attributes        = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_authorizer.main[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_authorizer" "main" {
      [32m+[0m[0m arn                              = (known after apply)
      [32m+[0m[0m authorizer_result_ttl_in_seconds = 300
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m identity_source                  = "method.request.header.Authorization"
      [32m+[0m[0m name                             = "modular-payment-system-authorizer"
      [32m+[0m[0m provider_arns                    = (known after apply)
      [32m+[0m[0m region                           = "ap-southeast-1"
      [32m+[0m[0m rest_api_id                      = (known after apply)
      [32m+[0m[0m type                             = "COGNITO_USER_POOLS"
    }

[1m  # module.api_gateway.aws_api_gateway_deployment.main[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_deployment" "main" {
      [32m+[0m[0m created_date = (known after apply)
      [32m+[0m[0m description  = "Deployment for dev environment"
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m region       = "ap-southeast-1"
      [32m+[0m[0m rest_api_id  = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_integration.ecs[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_integration" "ecs" {
      [32m+[0m[0m cache_namespace         = (known after apply)
      [32m+[0m[0m connection_type         = "INTERNET"
      [32m+[0m[0m http_method             = "ANY"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m integration_http_method = "ANY"
      [32m+[0m[0m passthrough_behavior    = (known after apply)
      [32m+[0m[0m region                  = "ap-southeast-1"
      [32m+[0m[0m resource_id             = (known after apply)
      [32m+[0m[0m rest_api_id             = (known after apply)
      [32m+[0m[0m timeout_milliseconds    = 29000
      [32m+[0m[0m type                    = "HTTP_PROXY"
      [32m+[0m[0m uri                     = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_integration.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_integration" "lambda" {
      [32m+[0m[0m cache_namespace         = (known after apply)
      [32m+[0m[0m connection_type         = "INTERNET"
      [32m+[0m[0m http_method             = "ANY"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m integration_http_method = "POST"
      [32m+[0m[0m passthrough_behavior    = (known after apply)
      [32m+[0m[0m region                  = "ap-southeast-1"
      [32m+[0m[0m resource_id             = (known after apply)
      [32m+[0m[0m rest_api_id             = (known after apply)
      [32m+[0m[0m timeout_milliseconds    = 29000
      [32m+[0m[0m type                    = "AWS_PROXY"
      [32m+[0m[0m uri                     = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_method.proxy[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_method" "proxy" {
      [32m+[0m[0m api_key_required = false
      [32m+[0m[0m authorization    = "COGNITO_USER_POOLS"
      [32m+[0m[0m authorizer_id    = (known after apply)
      [32m+[0m[0m http_method      = "ANY"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m region           = "ap-southeast-1"
      [32m+[0m[0m resource_id      = (known after apply)
      [32m+[0m[0m rest_api_id      = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_resource.proxy[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_resource" "proxy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m parent_id   = (known after apply)
      [32m+[0m[0m path        = (known after apply)
      [32m+[0m[0m path_part   = "{proxy+}"
      [32m+[0m[0m region      = "ap-southeast-1"
      [32m+[0m[0m rest_api_id = (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_rest_api.main[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_rest_api" "main" {
      [32m+[0m[0m api_key_source               = (known after apply)
      [32m+[0m[0m arn                          = (known after apply)
      [32m+[0m[0m binary_media_types           = (known after apply)
      [32m+[0m[0m created_date                 = (known after apply)
      [32m+[0m[0m description                  = "API Gateway for payment processing"
      [32m+[0m[0m disable_execute_api_endpoint = (known after apply)
      [32m+[0m[0m execution_arn                = (known after apply)
      [32m+[0m[0m id                           = (known after apply)
      [32m+[0m[0m minimum_compression_size     = (known after apply)
      [32m+[0m[0m name                         = "modular-payment-system-api"
      [32m+[0m[0m policy                       = (known after apply)
      [32m+[0m[0m region                       = "ap-southeast-1"
      [32m+[0m[0m root_resource_id             = (known after apply)
      [32m+[0m[0m tags                         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }

      [32m+[0m[0m endpoint_configuration (known after apply)
    }

[1m  # module.api_gateway.aws_api_gateway_stage.main[0m will be created
[0m  [32m+[0m[0m resource "aws_api_gateway_stage" "main" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m deployment_id = (known after apply)
      [32m+[0m[0m execution_arn = (known after apply)
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m invoke_url    = (known after apply)
      [32m+[0m[0m region        = "ap-southeast-1"
      [32m+[0m[0m rest_api_id   = (known after apply)
      [32m+[0m[0m stage_name    = "dev"
      [32m+[0m[0m tags          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all      = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m web_acl_arn   = (known after apply)
    }

[1m  # module.api_gateway.aws_wafv2_web_acl_association.main[0m will be created
[0m  [32m+[0m[0m resource "aws_wafv2_web_acl_association" "main" {
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m region       = "ap-southeast-1"
      [32m+[0m[0m resource_arn = (known after apply)
      [32m+[0m[0m web_acl_arn  = (known after apply)
    }

[1m  # module.cognito.aws_cognito_user_pool.main[0m will be created
[0m  [32m+[0m[0m resource "aws_cognito_user_pool" "main" {
      [32m+[0m[0m arn                        = (known after apply)
      [32m+[0m[0m creation_date              = (known after apply)
      [32m+[0m[0m custom_domain              = (known after apply)
      [32m+[0m[0m deletion_protection        = "INACTIVE"
      [32m+[0m[0m domain                     = (known after apply)
      [32m+[0m[0m email_verification_message = (known after apply)
      [32m+[0m[0m email_verification_subject = (known after apply)
      [32m+[0m[0m endpoint                   = (known after apply)
      [32m+[0m[0m estimated_number_of_users  = (known after apply)
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m last_modified_date         = (known after apply)
      [32m+[0m[0m mfa_configuration          = "OPTIONAL"
      [32m+[0m[0m name                       = "modular-payment-system-user-pool"
      [32m+[0m[0m region                     = "ap-southeast-1"
      [32m+[0m[0m sms_verification_message   = (known after apply)
      [32m+[0m[0m tags                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m user_pool_tier             = (known after apply)

      [32m+[0m[0m admin_create_user_config (known after apply)

      [32m+[0m[0m password_policy {
          [32m+[0m[0m minimum_length                   = 8
          [32m+[0m[0m require_lowercase                = true
          [32m+[0m[0m require_numbers                  = true
          [32m+[0m[0m require_symbols                  = true
          [32m+[0m[0m require_uppercase                = true
          [32m+[0m[0m temporary_password_validity_days = (known after apply)
        }

      [32m+[0m[0m sign_in_policy (known after apply)

      [32m+[0m[0m sms_configuration (known after apply)

      [32m+[0m[0m software_token_mfa_configuration {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m username_configuration (known after apply)

      [32m+[0m[0m verification_message_template (known after apply)
    }

[1m  # module.cognito.aws_cognito_user_pool_client.main[0m will be created
[0m  [32m+[0m[0m resource "aws_cognito_user_pool_client" "main" {
      [32m+[0m[0m access_token_validity                         = (known after apply)
      [32m+[0m[0m allowed_oauth_flows                           = (known after apply)
      [32m+[0m[0m allowed_oauth_flows_user_pool_client          = (known after apply)
      [32m+[0m[0m allowed_oauth_scopes                          = (known after apply)
      [32m+[0m[0m auth_session_validity                         = (known after apply)
      [32m+[0m[0m callback_urls                                 = (known after apply)
      [32m+[0m[0m client_secret                                 = (sensitive value)
      [32m+[0m[0m default_redirect_uri                          = (known after apply)
      [32m+[0m[0m enable_propagate_additional_user_context_data = (known after apply)
      [32m+[0m[0m enable_token_revocation                       = (known after apply)
      [32m+[0m[0m explicit_auth_flows                           = [
          [32m+[0m[0m "ALLOW_REFRESH_TOKEN_AUTH",
          [32m+[0m[0m "ALLOW_USER_PASSWORD_AUTH",
        ]
      [32m+[0m[0m generate_secret                               = false
      [32m+[0m[0m id                                            = (known after apply)
      [32m+[0m[0m id_token_validity                             = (known after apply)
      [32m+[0m[0m logout_urls                                   = (known after apply)
      [32m+[0m[0m name                                          = "modular-payment-system-client"
      [32m+[0m[0m prevent_user_existence_errors                 = (known after apply)
      [32m+[0m[0m read_attributes                               = (known after apply)
      [32m+[0m[0m refresh_token_validity                        = (known after apply)
      [32m+[0m[0m region                                        = "ap-southeast-1"
      [32m+[0m[0m supported_identity_providers                  = (known after apply)
      [32m+[0m[0m user_pool_id                                  = (known after apply)
      [32m+[0m[0m write_attributes                              = (known after apply)
    }

[1m  # module.database.aws_db_subnet_group.main[0m will be created
[0m  [32m+[0m[0m resource "aws_db_subnet_group" "main" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m description             = "Managed by Terraform"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m name                    = "modular-payment-system-db-subnet-group"
      [32m+[0m[0m name_prefix             = (known after apply)
      [32m+[0m[0m region                  = "ap-southeast-1"
      [32m+[0m[0m subnet_ids              = (known after apply)
      [32m+[0m[0m supported_network_types = (known after apply)
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                  = (known after apply)
    }

[1m  # module.database.aws_dynamodb_table.main[0m will be created
[0m  [32m+[0m[0m resource "aws_dynamodb_table" "main" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m billing_mode     = "PAY_PER_REQUEST"
      [32m+[0m[0m hash_key         = "id"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "modular-payment-system-dynamodb-table"
      [32m+[0m[0m read_capacity    = (known after apply)
      [32m+[0m[0m region           = "ap-southeast-1"
      [32m+[0m[0m stream_arn       = (known after apply)
      [32m+[0m[0m stream_label     = (known after apply)
      [32m+[0m[0m stream_view_type = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m write_capacity   = (known after apply)

      [32m+[0m[0m attribute {
          [32m+[0m[0m name = "id"
          [32m+[0m[0m type = "S"
        }

      [32m+[0m[0m point_in_time_recovery (known after apply)

      [32m+[0m[0m server_side_encryption (known after apply)

      [32m+[0m[0m ttl (known after apply)
    }

[1m  # module.database.aws_rds_cluster.aurora[0m will be created
[0m  [32m+[0m[0m resource "aws_rds_cluster" "aurora" {
      [32m+[0m[0m allocated_storage                     = (known after apply)
      [32m+[0m[0m apply_immediately                     = (known after apply)
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m availability_zones                    = (known after apply)
      [32m+[0m[0m backup_retention_period               = 3
      [32m+[0m[0m ca_certificate_identifier             = (known after apply)
      [32m+[0m[0m ca_certificate_valid_till             = (known after apply)
      [32m+[0m[0m cluster_identifier                    = "modular-payment-system-aurora-cluster"
      [32m+[0m[0m cluster_identifier_prefix             = (known after apply)
      [32m+[0m[0m cluster_members                       = (known after apply)
      [32m+[0m[0m cluster_resource_id                   = (known after apply)
      [32m+[0m[0m cluster_scalability_type              = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m database_insights_mode                = (known after apply)
      [32m+[0m[0m database_name                         = "modular-payment-systemdb"
      [32m+[0m[0m db_cluster_parameter_group_name       = (known after apply)
      [32m+[0m[0m db_subnet_group_name                  = "modular-payment-system-db-subnet-group"
      [32m+[0m[0m db_system_id                          = (known after apply)
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m deletion_protection                   = false
      [32m+[0m[0m enable_global_write_forwarding        = false
      [32m+[0m[0m enable_http_endpoint                  = false
      [32m+[0m[0m enable_local_write_forwarding         = false
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "aurora-mysql"
      [32m+[0m[0m engine_lifecycle_support              = (known after apply)
      [32m+[0m[0m engine_mode                           = "provisioned"
      [32m+[0m[0m engine_version                        = "8.0.mysql_aurora.3.08.0"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m iam_roles                             = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m master_password                       = (sensitive value)
      [32m+[0m[0m master_password_wo                    = (write-only attribute)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m master_username                       = "admin"
      [32m+[0m[0m monitoring_interval                   = (known after apply)
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m preferred_backup_window               = "07:00-09:00"
      [32m+[0m[0m preferred_maintenance_window          = (known after apply)
      [32m+[0m[0m reader_endpoint                       = (known after apply)
      [32m+[0m[0m region                                = "ap-southeast-1"
      [32m+[0m[0m skip_final_snapshot                   = false
      [32m+[0m[0m storage_encrypted                     = (known after apply)
      [32m+[0m[0m storage_type                          = (known after apply)
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # module.database.aws_rds_cluster_instance.aurora_instance[0][0m will be created
[0m  [32m+[0m[0m resource "aws_rds_cluster_instance" "aurora_instance" {
      [32m+[0m[0m apply_immediately                     = (known after apply)
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m cluster_identifier                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_parameter_group_name               = (known after apply)
      [32m+[0m[0m db_subnet_group_name                  = (known after apply)
      [32m+[0m[0m dbi_resource_id                       = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "aurora-mysql"
      [32m+[0m[0m engine_version                        = "8.0.mysql_aurora.3.08.0"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m force_destroy                         = false
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "modular-payment-system-aurora-instance-1"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.medium"
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m performance_insights_enabled          = (known after apply)
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m preferred_backup_window               = (known after apply)
      [32m+[0m[0m preferred_maintenance_window          = (known after apply)
      [32m+[0m[0m promotion_tier                        = 0
      [32m+[0m[0m publicly_accessible                   = (known after apply)
      [32m+[0m[0m region                                = "ap-southeast-1"
      [32m+[0m[0m storage_encrypted                     = (known after apply)
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m writer                                = (known after apply)
    }

[1m  # module.database.aws_rds_cluster_instance.aurora_instance[1][0m will be created
[0m  [32m+[0m[0m resource "aws_rds_cluster_instance" "aurora_instance" {
      [32m+[0m[0m apply_immediately                     = (known after apply)
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m cluster_identifier                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_parameter_group_name               = (known after apply)
      [32m+[0m[0m db_subnet_group_name                  = (known after apply)
      [32m+[0m[0m dbi_resource_id                       = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "aurora-mysql"
      [32m+[0m[0m engine_version                        = "8.0.mysql_aurora.3.08.0"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m force_destroy                         = false
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "modular-payment-system-aurora-instance-2"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.medium"
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m performance_insights_enabled          = (known after apply)
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m preferred_backup_window               = (known after apply)
      [32m+[0m[0m preferred_maintenance_window          = (known after apply)
      [32m+[0m[0m promotion_tier                        = 0
      [32m+[0m[0m publicly_accessible                   = (known after apply)
      [32m+[0m[0m region                                = "ap-southeast-1"
      [32m+[0m[0m storage_encrypted                     = (known after apply)
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m writer                                = (known after apply)
    }

[1m  # module.database.aws_security_group.rds[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "rds" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m from_port        = 3306
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3306
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "modular-payment-system-rds-sg-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m region                 = "ap-southeast-1"
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-rds-sg"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-rds-sg"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.ecr.aws_ecr_repository.banking_api[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "banking_api" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "modular-payment-system-banking-api"
      [32m+[0m[0m region               = "ap-southeast-1"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }

      [32m+[0m[0m image_scanning_configuration {
          [32m+[0m[0m scan_on_push = true
        }
    }

[1m  # module.ecr.aws_ecr_repository.langflow[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "langflow" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "modular-payment-system-langflow"
      [32m+[0m[0m region               = "ap-southeast-1"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }

      [32m+[0m[0m image_scanning_configuration {
          [32m+[0m[0m scan_on_push = true
        }
    }

[1m  # module.ecs.aws_ecs_cluster.main[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_cluster" "main" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m name     = "modular-payment-system-ecs-cluster"
      [32m+[0m[0m region   = "ap-southeast-1"
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }

      [32m+[0m[0m setting (known after apply)
    }

[1m  # module.ecs.aws_ecs_service.main[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_service" "main" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m availability_zone_rebalancing      = "DISABLED"
      [32m+[0m[0m cluster                            = (known after apply)
      [32m+[0m[0m deployment_maximum_percent         = 200
      [32m+[0m[0m deployment_minimum_healthy_percent = 100
      [32m+[0m[0m desired_count                      = 2
      [32m+[0m[0m enable_ecs_managed_tags            = false
      [32m+[0m[0m enable_execute_command             = false
      [32m+[0m[0m iam_role                           = (known after apply)
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m launch_type                        = "FARGATE"
      [32m+[0m[0m name                               = "modular-payment-system-ecs-service"
      [32m+[0m[0m platform_version                   = (known after apply)
      [32m+[0m[0m region                             = "ap-southeast-1"
      [32m+[0m[0m scheduling_strategy                = "REPLICA"
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m task_definition                    = (known after apply)
      [32m+[0m[0m triggers                           = (known after apply)
      [32m+[0m[0m wait_for_steady_state              = false

      [32m+[0m[0m load_balancer {
          [32m+[0m[0m container_name   = "modular-payment-system-banking-api"
          [32m+[0m[0m container_port   = 80
          [32m+[0m[0m target_group_arn = (known after apply)
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m network_configuration {
          [32m+[0m[0m assign_public_ip = false
          [32m+[0m[0m security_groups  = (known after apply)
          [32m+[0m[0m subnets          = (known after apply)
        }
    }

[1m  # module.ecs.aws_ecs_task_definition.banking_api[0m will be created
[0m  [32m+[0m[0m resource "aws_ecs_task_definition" "banking_api" {
      [32m+[0m[0m arn                      = (known after apply)
      [32m+[0m[0m arn_without_revision     = (known after apply)
      [32m+[0m[0m container_definitions    = (known after apply)
      [32m+[0m[0m cpu                      = "256"
      [32m+[0m[0m enable_fault_injection   = (known after apply)
      [32m+[0m[0m execution_role_arn       = (known after apply)
      [32m+[0m[0m family                   = "modular-payment-system-banking-api"
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m memory                   = "512"
      [32m+[0m[0m network_mode             = "awsvpc"
      [32m+[0m[0m region                   = "ap-southeast-1"
      [32m+[0m[0m requires_compatibilities = [
          [32m+[0m[0m "FARGATE",
        ]
      [32m+[0m[0m revision                 = (known after apply)
      [32m+[0m[0m skip_destroy             = false
      [32m+[0m[0m tags                     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m track_latest             = false
    }

[1m  # module.ecs.aws_iam_role.ecs_task_execution[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecs_task_execution" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "modular-payment-system-ecs-task-execution-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.ecs.aws_iam_role_policy_attachment.ecs_task_execution_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ecs_task_execution_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      [32m+[0m[0m role       = "modular-payment-system-ecs-task-execution-role"
    }

[1m  # module.ecs.aws_lb.main[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "main" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enable_zonal_shift                                           = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "modular-payment-system-alb"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m region                                                       = "ap-southeast-1"
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)

      [32m+[0m[0m subnet_mapping (known after apply)
    }

[1m  # module.ecs.aws_lb_listener.http[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "http" {
      [32m+[0m[0m arn                                                                   = (known after apply)
      [32m+[0m[0m id                                                                    = (known after apply)
      [32m+[0m[0m load_balancer_arn                                                     = (known after apply)
      [32m+[0m[0m port                                                                  = 80
      [32m+[0m[0m protocol                                                              = "HTTP"
      [32m+[0m[0m region                                                                = "ap-southeast-1"
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      [32m+[0m[0m routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      [32m+[0m[0m routing_http_response_access_control_max_age_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_content_security_policy_header_value            = (known after apply)
      [32m+[0m[0m routing_http_response_server_enabled                                  = (known after apply)
      [32m+[0m[0m routing_http_response_strict_transport_security_header_value          = (known after apply)
      [32m+[0m[0m routing_http_response_x_content_type_options_header_value             = (known after apply)
      [32m+[0m[0m routing_http_response_x_frame_options_header_value                    = (known after apply)
      [32m+[0m[0m ssl_policy                                                            = (known after apply)
      [32m+[0m[0m tags_all                                                              = (known after apply)
      [32m+[0m[0m tcp_idle_timeout_seconds                                              = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }

      [32m+[0m[0m mutual_authentication (known after apply)
    }

[1m  # module.ecs.aws_lb_target_group.main[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "main" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "modular-payment-system-tg"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 80
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m region                             = "ap-southeast-1"
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m target_type                        = "ip"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 3
          [32m+[0m[0m interval            = 30
          [32m+[0m[0m matcher             = "200"
          [32m+[0m[0m path                = "/health"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 5
          [32m+[0m[0m unhealthy_threshold = 3
        }

      [32m+[0m[0m stickiness (known after apply)

      [32m+[0m[0m target_failover (known after apply)

      [32m+[0m[0m target_group_health (known after apply)

      [32m+[0m[0m target_health_state (known after apply)
    }

[1m  # module.lambda.aws_cloudwatch_log_group.processor_lambda_log_group[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "processor_lambda_log_group" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/modular-payment-system-processor"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m region            = "ap-southeast-1"
      [32m+[0m[0m retention_in_days = 14
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1m  # module.lambda.aws_cloudwatch_log_group.router_lambda_log_group[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "router_lambda_log_group" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/modular-payment-system-router"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m region            = "ap-southeast-1"
      [32m+[0m[0m retention_in_days = 14
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1m  # module.lambda.aws_iam_policy.lambda_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "lambda_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Custom policy for Lambda"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "modular-payment-system-lambda-policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:ListBucket",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::*-data-bucket",
                          [32m+[0m[0m "arn:aws:s3:::*-data-bucket/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sqs:SendMessage",
                          [32m+[0m[0m "sqs:ReceiveMessage",
                          [32m+[0m[0m "sqs:DeleteMessage",
                          [32m+[0m[0m "sqs:GetQueueAttributes",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:sqs:*:*:*-queue"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:PutItem",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:dynamodb:*:*:table/*-dynamodb-table"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "rds:Describe*",
                          [32m+[0m[0m "rds:Connect",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:rds:*:*:db:*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.lambda.aws_iam_role.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "modular-payment-system-lambda-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.lambda.aws_iam_role.processor_lambda_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "processor_lambda_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "modular-payment-system-processor-lambda-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.lambda.aws_iam_role.router_lambda_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "router_lambda_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "modular-payment-system-router-lambda-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.lambda.aws_iam_role_policy.lambda_custom_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "lambda_custom_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "modular-payment-system-lambda-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:ListBucket",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::*-data-bucket",
                          [32m+[0m[0m "arn:aws:s3:::*-data-bucket/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sqs:SendMessage",
                          [32m+[0m[0m "sqs:ReceiveMessage",
                          [32m+[0m[0m "sqs:DeleteMessage",
                          [32m+[0m[0m "sqs:GetQueueAttributes",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:sqs:*:*:*-queue"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:PutItem",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:Scan",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:dynamodb:*:*:table/*-dynamodb-table"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "rds:Describe*",
                          [32m+[0m[0m "rds:Connect",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:rds:*:*:db:*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.lambda.aws_iam_role_policy_attachment.lambda_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      [32m+[0m[0m role       = "modular-payment-system-lambda-role"
    }

[1m  # module.lambda.aws_iam_role_policy_attachment.processor_lambda_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "processor_lambda_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "modular-payment-system-processor-lambda-role"
    }

[1m  # module.lambda.aws_iam_role_policy_attachment.router_lambda_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "router_lambda_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "modular-payment-system-router-lambda-role"
    }

[1m  # module.lambda.aws_lambda_function.processor[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "processor" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/lambda/src/processor/processor.zip"
      [32m+[0m[0m function_name                  = "modular-payment-system-processor"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m region                         = "ap-southeast-1"
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "nodejs18.x"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "fehKJLLez+mWV7ALGAgzhSgum7+gAmhzXKXviZtCnfc="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.lambda.aws_lambda_function.router[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "router" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "modules/lambda/src/router/router.zip"
      [32m+[0m[0m function_name                  = "modular-payment-system-router"
      [32m+[0m[0m handler                        = "index.handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m region                         = "ap-southeast-1"
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "nodejs18.x"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "TCjno4v2RKdMhZ8IX3DjK1vY0Fm6IyulE3eo1RFbtV4="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m ipv6_allowed_for_dual_stack = false
          [32m+[0m[0m security_group_ids          = (known after apply)
          [32m+[0m[0m subnet_ids                  = (known after apply)
          [32m+[0m[0m vpc_id                      = (known after apply)
        }
    }

[1m  # module.messaging.aws_sns_topic.main[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic" "main" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m beginning_archive_time      = (known after apply)
      [32m+[0m[0m content_based_deduplication = false
      [32m+[0m[0m fifo_throughput_scope       = (known after apply)
      [32m+[0m[0m fifo_topic                  = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "modular-payment-system-topic"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m owner                       = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = "ap-southeast-1"
      [32m+[0m[0m signature_version           = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tracing_config              = (known after apply)
    }

[1m  # module.messaging.aws_sqs_queue.main[0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue" "main" {
      [32m+[0m[0m arn                               = (known after apply)
      [32m+[0m[0m content_based_deduplication       = false
      [32m+[0m[0m deduplication_scope               = (known after apply)
      [32m+[0m[0m delay_seconds                     = 0
      [32m+[0m[0m fifo_queue                        = false
      [32m+[0m[0m fifo_throughput_limit             = (known after apply)
      [32m+[0m[0m id                                = (known after apply)
      [32m+[0m[0m kms_data_key_reuse_period_seconds = (known after apply)
      [32m+[0m[0m max_message_size                  = 262144
      [32m+[0m[0m message_retention_seconds         = 86400
      [32m+[0m[0m name                              = "modular-payment-system-queue"
      [32m+[0m[0m name_prefix                       = (known after apply)
      [32m+[0m[0m policy                            = (known after apply)
      [32m+[0m[0m receive_wait_time_seconds         = 10
      [32m+[0m[0m redrive_allow_policy              = (known after apply)
      [32m+[0m[0m redrive_policy                    = (known after apply)
      [32m+[0m[0m region                            = "ap-southeast-1"
      [32m+[0m[0m sqs_managed_sse_enabled           = (known after apply)
      [32m+[0m[0m tags                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m url                               = (known after apply)
      [32m+[0m[0m visibility_timeout_seconds        = 30
    }

[1m  # module.monitoring.aws_cloudwatch_dashboard.main[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_dashboard" "main" {
      [32m+[0m[0m dashboard_arn  = (known after apply)
      [32m+[0m[0m dashboard_body = jsonencode(
            {
              [32m+[0m[0m widgets = [
                  [32m+[0m[0m {
                      [32m+[0m[0m height     = 6
                      [32m+[0m[0m properties = {
                          [32m+[0m[0m metrics = [
                              [32m+[0m[0m [
                                  [32m+[0m[0m "AWS/ECS",
                                  [32m+[0m[0m "CPUUtilization",
                                  [32m+[0m[0m "ClusterName",
                                  [32m+[0m[0m "modular-payment-system-ecs-cluster",
                                ],
                              [32m+[0m[0m [
                                  [32m+[0m[0m "AWS/Lambda",
                                  [32m+[0m[0m "Invocations",
                                  [32m+[0m[0m "FunctionName",
                                  [32m+[0m[0m "modular-payment-system-router",
                                ],
                              [32m+[0m[0m [
                                  [32m+[0m[0m "AWS/Lambda",
                                  [32m+[0m[0m "Invocations",
                                  [32m+[0m[0m "FunctionName",
                                  [32m+[0m[0m "modular-payment-system-processor",
                                ],
                            ]
                          [32m+[0m[0m region  = "ap-southeast-1"
                          [32m+[0m[0m stacked = false
                          [32m+[0m[0m title   = "ECS and Lambda Metrics"
                          [32m+[0m[0m view    = "timeSeries"
                        }
                      [32m+[0m[0m type       = "metric"
                      [32m+[0m[0m width      = 12
                      [32m+[0m[0m x          = 0
                      [32m+[0m[0m y          = 0
                    },
                ]
            }
        )
      [32m+[0m[0m dashboard_name = "modular-payment-system-dashboard"
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "ap-southeast-1"
    }

[1m  # module.monitoring.aws_cloudwatch_metric_alarm.ecs_cpu[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "ecs_cpu" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_description                     = "Alarm when ECS CPU exceeds 80%"
      [32m+[0m[0m alarm_name                            = "modular-payment-system-ecs-cpu-alarm"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "ClusterName" = "modular-payment-system-ecs-cluster"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "CPUUtilization"
      [32m+[0m[0m namespace                             = "AWS/ECS"
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m region                                = "ap-southeast-1"
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m threshold                             = 80
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # module.s3.aws_s3_bucket.data[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "data" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "modular-payment-system-data-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_region               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = "ap-southeast-1"
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.s3.aws_s3_bucket_server_side_encryption_configuration.data[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "data" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m region = "ap-southeast-1"

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m sse_algorithm     = "AES256"
                [90m# (1 unchanged attribute hidden)[0m[0m
            }
        }
    }

[1m  # module.s3.aws_s3_bucket_versioning.data[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "data" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m region = "ap-southeast-1"

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # module.security.aws_security_group.ecs_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ecs_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "modular-payment-system-ecs-sg-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m region                 = "ap-southeast-1"
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-ecs-sg"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-ecs-sg"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.lambda_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "lambda_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "modular-payment-system-lambda-sg-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m region                 = "ap-southeast-1"
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-lambda-sg"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-lambda-sg"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_security_group.sagemaker_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "sagemaker_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "modular-payment-system-sagemaker-sg-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m region                 = "ap-southeast-1"
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-sagemaker-sg"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-sagemaker-sg"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.security.aws_wafv2_web_acl.main[0m will be created
[0m  [32m+[0m[0m resource "aws_wafv2_web_acl" "main" {
      [32m+[0m[0m application_integration_url = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m capacity                    = (known after apply)
      [32m+[0m[0m description                 = "WAF for API protection"
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m lock_token                  = (known after apply)
      [32m+[0m[0m name                        = "modular-payment-system-waf-acl"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m region                      = "ap-southeast-1"
      [32m+[0m[0m scope                       = "REGIONAL"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }

      [32m+[0m[0m default_action {
          [32m+[0m[0m allow {
            }
        }

      [32m+[0m[0m rule {
          [32m+[0m[0m name     = "AWSManagedRulesCommonRuleSet"
          [32m+[0m[0m priority = 1

          [32m+[0m[0m override_action {
              [32m+[0m[0m none {}
            }

          [32m+[0m[0m statement {
              [32m+[0m[0m managed_rule_group_statement {
                  [32m+[0m[0m name        = "AWSManagedRulesCommonRuleSet"
                  [32m+[0m[0m vendor_name = "AWS"
                    [90m# (1 unchanged attribute hidden)[0m[0m
                }
            }

          [32m+[0m[0m visibility_config {
              [32m+[0m[0m cloudwatch_metrics_enabled = true
              [32m+[0m[0m metric_name                = "modular-payment-system-waf-metrics"
              [32m+[0m[0m sampled_requests_enabled   = true
            }
        }

      [32m+[0m[0m visibility_config {
          [32m+[0m[0m cloudwatch_metrics_enabled = true
          [32m+[0m[0m metric_name                = "modular-payment-system-waf-metrics"
          [32m+[0m[0m sampled_requests_enabled   = true
        }
    }

[1m  # module.vpc.aws_eip.nat[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m region               = "ap-southeast-1"
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-eip-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-eip-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1m  # module.vpc.aws_eip.nat[1][0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m region               = "ap-southeast-1"
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-eip-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-eip-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1m  # module.vpc.aws_eip.nat[2][0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m region               = "ap-southeast-1"
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-eip-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-eip-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1m  # module.vpc.aws_internet_gateway.main[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "main" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m region   = "ap-southeast-1"
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-igw"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-igw"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.main[0][0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "main" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m region                             = "ap-southeast-1"
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-gateway-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-gateway-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1m  # module.vpc.aws_nat_gateway.main[1][0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "main" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m region                             = "ap-southeast-1"
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-gateway-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-gateway-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1m  # module.vpc.aws_nat_gateway.main[2][0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "main" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m region                             = "ap-southeast-1"
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-gateway-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-nat-gateway-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1m  # module.vpc.aws_route_table.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m region           = "ap-southeast-1"
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m nat_gateway_id             = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-rt-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-rt-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m region           = "ap-southeast-1"
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m nat_gateway_id             = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-rt-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-rt-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.private[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m region           = "ap-southeast-1"
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m nat_gateway_id             = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-rt-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-rt-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m region           = "ap-southeast-1"
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-public-rt"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-public-rt"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "ap-southeast-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "ap-southeast-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "ap-southeast-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "ap-southeast-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "ap-southeast-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m region         = "ap-southeast-1"
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "ap-southeast-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-subnet-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-subnet-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "ap-southeast-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-subnet-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-subnet-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.5.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "ap-southeast-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-subnet-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-private-subnet-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "ap-southeast-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-public-subnet-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-public-subnet-1"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "ap-southeast-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-public-subnet-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-public-subnet-2"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "ap-southeast-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m region                                         = "ap-southeast-1"
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-public-subnet-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-public-subnet-3"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.main[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m region                               = "ap-southeast-1"
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-vpc"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "ManagedBy"   = "Terraform"
          [32m+[0m[0m "Name"        = "modular-payment-system-vpc"
          [32m+[0m[0m "Project"     = "modular-payment-system"
        }
    }

[1mPlan:[0m 83 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m api_gateway_url                = (known after apply)
  [32m+[0m[0m aurora_cluster_endpoint        = (known after apply)
  [32m+[0m[0m aurora_reader_endpoint         = (known after apply)
  [32m+[0m[0m cognito_client_id              = (known after apply)
  [32m+[0m[0m cognito_user_pool_id           = (known after apply)
  [32m+[0m[0m dynamodb_table_name            = "modular-payment-system-dynamodb-table"
  [32m+[0m[0m ecr_banking_api_repository_url = (known after apply)
  [32m+[0m[0m ecr_langflow_repository_url    = (known after apply)
  [32m+[0m[0m quicksight_dashboard_url       = "https://ap-southeast-1.quicksight.aws.amazon.com/sn/dashboards/modular-payment-system-quicksight-datasource"
  [32m+[0m[0m s3_bucket_name                 = (known after apply)
  [32m+[0m[0m sagemaker_endpoint_name        = "modular-payment-system-sagemaker-endpoint"
  [32m+[0m[0m vpc_id                         = (known after apply)
  [32m+[0m[0m waf_acl_arn                    = (known after apply)
